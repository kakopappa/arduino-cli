{"version":3,"sources":["../src/parseProgressLog.js"],"names":["R","progressBarRegExp","parseProgressMessage","str","compose","ifElse","test","res","percentage","parseInt","estimated","message","match","always","replace","onProgress","pipe","split","reject","isEmpty","map"],"mappings":";;;;;;;AAAA;;IAAYA,C;;;;AAEZ,MAAMC,oBAAoB,kIAA1B;;AAEO,MAAMC,sDAAuBC,OAClCH,EAAEI,OAAF,CACEJ,EAAEK,MAAF,CACEL,EAAEM,IAAF,CAAOL,iBAAP,CADF,EAEED,EAAEI,OAAF,CACEG,QAAQ;AACNC,cAAYD,IAAI,CAAJ,IAASE,SAASF,IAAI,CAAJ,CAAT,EAAiB,EAAjB,CAAT,GAAgC,CADtC;AAENG,aAAWH,IAAI,CAAJ,KAAU,SAFf;AAGNI,WAAS;AAHH,CAAR,CADF,EAMEX,EAAEY,KAAF,CAAQX,iBAAR,CANF,CAFF,EAUEU,WACEX,EAAEI,OAAF,CACEI,eAAe;AACbA,YADa;AAEbE,aAAW,CAFE;AAGbC;AAHa,CAAf,CADF,EAMEX,EAAEK,MAAF,CACEL,EAAEM,IAAF,CAAO,yBAAP,CADF,EAEEN,EAAEa,MAAF,CAAS,GAAT,CAFF,EAGEb,EAAEa,MAAF,CAAS,CAAT,CAHF,CANF,EAWEF,OAXF,CAXJ,CADF,EAyBEX,EAAEc,OAAF,CAAU,KAAV,EAAiB,EAAjB,CAzBF,EA0BEd,EAAEc,OAAF,CAAU,KAAV,EAAiB,EAAjB,CA1BF,EA2BEX,GA3BF,CADK;;kBA8BQY,cACbf,EAAEgB,IAAF,CACEhB,EAAEiB,KAAF,CAAQ,IAAR,CADF,EAEEjB,EAAEkB,MAAF,CAASlB,EAAEmB,OAAX,CAFF,EAGEnB,EAAEoB,GAAF,CAAMpB,EAAEgB,IAAF,CAAOd,oBAAP,EAA6Ba,UAA7B,CAAN,CAHF,C","file":"parseProgressLog.js","sourcesContent":["import * as R from 'ramda';\n\nconst progressBarRegExp = /^\\s?(?:[a-zA-Z0-9:@.\\-_+]+\\s)?[0-9.]+(?:\\s(?:Ki|Mi)?B)? \\/ [0-9.]+(?:\\s(?:Ki|Mi)?B)? (?:\\[[=>-]+\\])?\\s+([0-9.]+)%\\s?([0-9smh]+)?/;\n\nexport const parseProgressMessage = str =>\n  R.compose(\n    R.ifElse(\n      R.test(progressBarRegExp),\n      R.compose(\n        res => ({\n          percentage: res[1] ? parseInt(res[1], 10) : 0,\n          estimated: res[2] || 'unknown',\n          message: null,\n        }),\n        R.match(progressBarRegExp)\n      ),\n      message =>\n        R.compose(\n          percentage => ({\n            percentage,\n            estimated: 0,\n            message,\n          }),\n          R.ifElse(\n            R.test(/(downloaded|installed)/i),\n            R.always(100),\n            R.always(0)\n          )\n        )(message)\n    ),\n    R.replace(/\\n/g, ''),\n    R.replace(/\\r/g, '')\n  )(str);\n\nexport default onProgress =>\n  R.pipe(\n    R.split('\\n'),\n    R.reject(R.isEmpty),\n    R.map(R.pipe(parseProgressMessage, onProgress))\n  );\n"]}