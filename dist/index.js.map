{"version":3,"sources":["../src/index.js"],"names":["R","spawn","bin","args","options","encoding","maxBuffer","noop","ArduinoCli","pathToBin","config","configureVal","configPath","path","cfg","configDir","dir","runningProcesses","appendProcess","proc","append","deleteProcess","reject","equals","runWithProgress","onProgress","spawnArgs","compose","concat","isEmpty","stdio","stdout","on","data","toString","stderr","then","prop","sketch","name","directories","user","runAndParseJson","JSON","parse","listCores","when","always","listBoardsWith","listCmd","boardsGetter","Promise","all","cores","boards","getConfig","YAML","getPathToBin","killProcesses","forEach","kill","getRunningProcesses","dumpConfig","updateConfig","newConfig","newCfg","listConnectedBoards","listInstalledBoards","listAvailableBoards","compile","fqbn","sketchName","outputDir","verbose","upload","port","core","download","pkgName","install","list","search","query","defaultTo","uninstall","updateIndex","upgrade","version","createSketch","setPackageIndexUrls","urls"],"mappings":"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","file":"index.js","sourcesContent":["import * as R from 'ramda';\nimport { resolve } from 'path';\nimport { promisifyChildProcess } from 'promisify-child-process';\nimport crossSpawn from 'cross-spawn';\nimport YAML from 'yamljs';\nimport { remove } from 'fs-extra';\n\nimport { saveConfig, configure, setPackageIndexUrls } from './config';\nimport { patchBoardsWithOptions } from './optionParser';\nimport listAvailableBoards from './listAvailableBoards';\nimport parseProgressLog from './parseProgressLog';\n\nconst spawn = (bin, args, options) =>\n  promisifyChildProcess(crossSpawn(bin, args, options), {\n    encoding: 'utf8',\n    maxBuffer: 10 * 1024 * 1024,\n  });\n\nconst noop = () => {};\n\n/**\n * Initializes object to work with `arduino-cli`\n * @param {String} pathToBin Path to `arduino-cli`\n * @param {Object} config Plain-object representation of `.cli-config.yml`\n */\nconst ArduinoCli = (pathToBin, config = null) => {\n  const configureVal = configure(config);\n  let configPath = configureVal.path;\n  let cfg = configureVal.config;\n  const configDir = configureVal.dir;\n  let runningProcesses = [];\n\n  const appendProcess = proc => {\n    runningProcesses = R.append(proc, runningProcesses);\n  };\n  const deleteProcess = proc => {\n    runningProcesses = R.reject(R.equals(proc), runningProcesses);\n  };\n\n  const runWithProgress = async (onProgress, args) => {\n    const spawnArgs = R.compose(\n      R.concat([`--config-file`, configDir]),\n      R.reject(R.isEmpty)\n    )(args);\n    const proc = spawn(pathToBin, spawnArgs, {\n      stdio: ['inherit', 'pipe', 'pipe'],\n    });\n    proc.stdout.on('data', data => onProgress(data.toString()));\n    proc.stderr.on('data', data => onProgress(data.toString()));\n    proc.on('exit', () => deleteProcess(proc));\n\n    appendProcess(proc);\n\n    return proc.then(R.prop('stdout'));\n  };\n\n  const sketch = name => resolve(cfg.directories.user, name);\n\n  const runAndParseJson = args => runWithProgress(noop, args).then(JSON.parse);\n\n  const listCores = () =>\n    runWithProgress(noop, ['core', 'list', '--format=json'])\n      .then(R.when(R.isEmpty, R.always('[]')))\n      .then(JSON.parse);\n\n  const listBoardsWith = (listCmd, boardsGetter) =>\n    Promise.all([\n      listCores(),\n      runAndParseJson(['board', listCmd, '--format=json']),\n    ]).then(([cores, boards]) =>\n      patchBoardsWithOptions(cfg.directories.data, cores, boardsGetter(boards))\n    );\n\n  const getConfig = () =>\n    runWithProgress(noop, ['config', 'dump']).then(YAML.parse);\n\n  return {\n    getPathToBin: () => pathToBin,\n    killProcesses: () => {\n      R.forEach(proc => {\n        proc.kill('SIGTERM');\n        deleteProcess(proc);\n      }, runningProcesses);\n      return true;\n    },\n    getRunningProcesses: () => runningProcesses,\n    dumpConfig: getConfig,\n    updateConfig: newConfig => {\n      const newCfg = saveConfig(configPath, newConfig);\n      configPath = newCfg.path;\n      cfg = newCfg.config;\n      return cfg;\n    },\n    listConnectedBoards: () => listBoardsWith('list', R.prop('serialBoards')),\n    listInstalledBoards: () => listBoardsWith('listall', R.prop('boards')),\n    listAvailableBoards: () =>\n      listAvailableBoards(getConfig, cfg.directories.data),\n    compile: (onProgress, fqbn, sketchName, outputDir, verbose = false,) =>\n      runWithProgress(onProgress, [\n        'compile',\n        `--fqbn=${fqbn}`,\n        outputDir ? `--output-dir=${outputDir}` : '',\n        verbose ? '--verbose' : '',\n\n        sketch(sketchName),\n      ]),\n    upload: (onProgress, port, fqbn, sketchName, verbose = false) =>\n      runWithProgress(onProgress, [\n        'upload',\n        `--fqbn=${fqbn}`,\n        `--port=${port}`,\n        verbose ? '--verbose' : '',\n        '-t',\n        sketch(sketchName),\n      ]),\n    core: {\n      download: (onProgress, pkgName) =>\n        // TODO:\n        // Get rid of `remove` the staging directory when\n        // arduino-cli fix issue https://github.com/arduino/arduino-cli/issues/43\n        remove(resolve(cfg.directories.data, 'staging')).then(() =>\n          runWithProgress(parseProgressLog(onProgress), [\n            'core',\n            'download',\n            pkgName,\n          ])\n        ),\n      install: (onProgress, pkgName) =>\n        // TODO:\n        // Get rid of `remove` the staging directory when\n        // arduino-cli fix issue https://github.com/arduino/arduino-cli/issues/43\n        remove(resolve(cfg.directories.data, 'staging')).then(() =>\n          runWithProgress(parseProgressLog(onProgress), [\n            'core',\n            'install',\n            pkgName,\n          ])\n        ),\n      list: listCores,\n      search: query =>\n        runWithProgress(noop, ['core', 'search', query, '--format=json'])\n          .then(R.prop('Platforms'))\n          .then(R.defaultTo([])),\n      uninstall: pkgName =>\n        runWithProgress(noop, ['core', 'uninstall', pkgName]),\n      updateIndex: () => runWithProgress(noop, ['core', 'update-index']),\n      upgrade: onProgress =>\n        runWithProgress(parseProgressLog(onProgress), ['core', 'upgrade']),\n    },\n    version: () =>\n      runAndParseJson(['version', '--format=json']).then(\n        R.prop('VersionString')\n      ),\n    createSketch: sketchName =>\n      runWithProgress(noop, ['sketch', 'new', sketch(sketchName)]).then(\n        R.always(resolve(cfg.directories.user, sketchName, `${sketchName}.ino`))\n      ),\n    setPackageIndexUrls: urls => setPackageIndexUrls(configPath, urls),\n  };\n};\n\nexport default ArduinoCli;\n"]}